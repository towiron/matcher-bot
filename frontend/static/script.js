const tg = window.Telegram.WebApp;
tg.expand();

const cityInput = document.getElementById("cityInput");
const detectLocationBtn = document.getElementById("detectLocationBtn");

let userLatitude = null;
let userLongitude = null;

// üîπ –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ OpenStreetMap
async function reverseGeocode(latitude, longitude) {
  try {
    const response = await fetch(`https://nominatim.openstreetmap.org/reverse?format=json&lat=${latitude}&lon=${longitude}&zoom=10`);
    const data = await response.json();

    if (data.address) {
      const cityName = data.address.city || data.address.town || data.address.village || data.address.municipality || data.address.state;

      if (cityName) {
        cityInput.value = cityName;
        userLatitude = latitude;
        userLongitude = longitude;
      } else {
        alert("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≥–æ—Ä–æ–¥");
      }
    }
  } catch (error) {
    console.error("Error reverse geocoding:", error);
    alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –≥–æ—Ä–æ–¥–∞. –í–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é.");
  }
}

// üîπ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏
detectLocationBtn.addEventListener("click", () => {
  if (!navigator.geolocation) {
    alert("–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ –≤–∞—à–µ–º –±—Ä–∞—É–∑–µ—Ä–µ");
    return;
  }

  detectLocationBtn.disabled = true;
  detectLocationBtn.textContent = "‚è≥ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ...";

  navigator.geolocation.getCurrentPosition(
    async (position) => {
      const { latitude, longitude } = position.coords;

      // üîÑ –í—ã–∑—ã–≤–∞–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é —á–µ—Ä–µ–∑ nominatim –Ω–∞–ø—Ä—è–º—É—é
      await reverseGeocode(latitude, longitude);

      detectLocationBtn.disabled = false;
      detectLocationBtn.textContent = "üìç –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≥–æ—Ä–æ–¥";
    },
    (error) => {
      alert("–û—à–∏–±–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏: " + error.message);
      detectLocationBtn.disabled = false;
      detectLocationBtn.textContent = "üìç –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≥–æ—Ä–æ–¥";
    }
  );
});

// üîπ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã
document.getElementById("profileForm").addEventListener("submit", async (e) => {
  e.preventDefault();

  const formData = Object.fromEntries(new FormData(e.target).entries());

  formData.has_children = formData.has_children === "true";
  if (formData.polygamy) {
    formData.polygamy = formData.polygamy === "true";
  }

  const payload = {
    action: 'profile_submit',
    ...formData,
    user_id: tg.initDataUnsafe?.user?.id,
    latitude: userLatitude,
    longitude: userLongitude
  };

  console.log("–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –±–æ—Ç–∞:", payload); // ‚Üê –ü—Ä–æ–≤–µ—Ä—å —ç—Ç–æ —Ç–æ–∂–µ

  // üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram-–±–æ—Ç
  tg.sendData(JSON.stringify(payload)); // ‚Üê —Å—é–¥–∞ –¥–æ—Ö–æ–¥–∏—Ç?
  alert("–î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!");
});
