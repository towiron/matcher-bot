from sqlalchemy import select, func
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.orm import joinedload

from data.config import STARTER_CHANCE_COUNT, CHANCE_COST
from database.services.base import BaseService
from utils.logging import logger
from ..models import BalanceTopUpModel, BalanceUsageModel
from ..models.balance_top_up import TopUpSource
from ..models.balance_usage import UsageReason

from ..models.user import UserModel, UserStatus
from .match import Match
from .profile import Profile


class User(BaseService):
    model = UserModel

    @staticmethod
    async def get_with_profile(session: AsyncSession, id: int):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—å"""
        result = await session.execute(
            select(UserModel).options(joinedload(UserModel.profile)).where(UserModel.id == id)
        )
        return result.scalar_one_or_none()

    @staticmethod
    async def get_with_relations(session: AsyncSession, id: int):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—Ä–æ—Ñ–∏–ª–µ–º –∏ —Ñ–∏–ª—å—Ç—Ä–æ–º"""
        result = await session.execute(
            select(UserModel)
            .options(
                joinedload(UserModel.profile),
                joinedload(UserModel.filter)
            )
            .where(UserModel.id == id)
        )
        return result.scalar_one_or_none()

    @staticmethod
    async def get_or_create(
            session: AsyncSession, id: int, username: str = None, language: str = None
    ) -> UserModel:
        if user := await User.get_with_relations(session, id):
            return user, False
        await User.create(session, id=id, username=username, language=language)
        user = await User.get_with_relations(session, id)
        return user, True

    @staticmethod
    async def create(
            session: AsyncSession, id: int, username: str = None, language: str = None
    ) -> UserModel:
        """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ —à–∞–Ω—Å—ã"""
        logger.log("DATABASE", f"New user: {id} (@{username}) {language}")

        user = UserModel(id=id, username=username, language=language)
        session.add(user)

        session.add(BalanceTopUpModel(
            user_id=id,
            amount=STARTER_CHANCE_COUNT,
            paid_sum=CHANCE_COST * STARTER_CHANCE_COUNT,  # üëà –¥–æ–±–∞–≤–ª—è–µ–º –æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ "—É—Å–ª–æ–≤–Ω—ã–µ" —Å—É–º–º—ã
            source=TopUpSource.Initial,
            payload="starter_chances"
        ))

        await session.commit()
        return user

    @staticmethod
    async def increment_referral_count(
        session: AsyncSession, user: UserModel, num: int = 1
    ) -> None:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {inviter_id}"""
        user.referral += num
        await session.commit()
        logger.log("DATABASE", f"{user.id} (@{user.username}): –ø—Ä–∏–≤–µ–ª –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

    async def ban(session: AsyncSession, id: int) -> None:
        """
        –ë–ª–æ–∫–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
        - –ú–µ–Ω—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∞–Ω–∫–µ—Ç—ã –Ω–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π.
        - –ú–µ–Ω—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π.
        - –£–¥–∞–ª—è–µ—Ç –≤—Å–µ –ª–∞–π–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ—Å—Ç–∞–≤–∏–ª.
        """
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ –∞–Ω–∫–µ—Ç—É
        user = await User.get_with_profile(session, id)
        if not user:
            logger.log("DATABASE", f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        if user.profile:
            await Profile.update(
                session,
                id=id,
                is_active=False,
            )

        await User.update(
            session=session,
            id=id,
            status=UserStatus.Banned,
        )

        # –£–¥–∞–ª—è–µ–º –≤—Å–µ –ª–∞–π–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ—Å—Ç–∞–≤–∏–ª
        await Match.delete_all_by_sender(session, sender_id=id)

        logger.log("DATABASE", f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {id} –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")

    @staticmethod
    async def unban(session: AsyncSession, id: int) -> None:
        """
        –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
        - –ú–µ–Ω—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∞–Ω–∫–µ—Ç—ã –Ω–∞ –∞–∫—Ç–∏–≤–Ω—ã–π.
        - –ú–µ–Ω—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π.
        """
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ –∞–Ω–∫–µ—Ç—É
        user = await User.get_with_profile(session, id)
        if not user:
            logger.log("DATABASE", f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        if user.profile:
            await Profile.update(
                session,
                id=id,
                is_active=True,
            )

        await User.update(
            session=session,
            id=id,
            status=UserStatus.Banned,
        )

        logger.log("DATABASE", f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {id} –±—ã–ª —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")

    @staticmethod
    async def use_one_chance(
            session: AsyncSession,
            user: UserModel,
            target_id: int = None,
    ) -> None:
        """–°–ø–∏—Å—ã–≤–∞–µ—Ç 1 —à–∞–Ω—Å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é"""
        balance = user.balance - CHANCE_COST

        if balance < 0:
            raise ValueError("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —à–∞–Ω—Å–æ–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞")

        user.balance -= CHANCE_COST

        session.add(BalanceUsageModel(
            user_id=user.id,
            amount=1,
            reason=UsageReason.ViewProfileManual,
            target_id=str(target_id) if target_id else None
        ))

        await session.commit()

    @staticmethod
    async def get_chance_balance(user: UserModel,) -> int:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –≤ —à–∞–Ω—Å–∞—Ö"""
        chances = user.balance // CHANCE_COST
        return chances


    @staticmethod
    async def add_chances_from_payment(
        session: AsyncSession,
        user: UserModel,
        paid_sum: int,
        source: str = TopUpSource.Click,
        payload: str = None
    ) -> None:
        """
        –ü–æ–ø–æ–ª–Ω—è–µ—Ç –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–Ω—Å–æ–≤.
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Ç–∞–±–ª–∏—Ü—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π.
        """
        user.balance += paid_sum
        chance_count = paid_sum // CHANCE_COST

        session.add(BalanceTopUpModel(
            user_id=user.id,
            amount=chance_count,
            paid_sum=paid_sum,
            source=source,
            payload=payload
        ))

        await session.commit()
