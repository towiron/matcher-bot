from typing import Any, Callable, Optional, Tuple
from datetime import date, timedelta, timezone
import pytz

from aiogram import BaseMiddleware
from aiogram.types import Update
from sqlalchemy.ext.asyncio import AsyncSession

from data.config import CHANCE_COST
from database.models import BalanceTopUpModel
from database.models.balance_top_up import TopUpSource
from database.models.user import UserModel, UserStatus
from database.services import User

_TZ = pytz.timezone("Asia/Tashkent")


def _today_tashkent() -> date:
    from datetime import datetime
    return datetime.now(_TZ).date()


def _to_tashkent_date(dt) -> Optional[date]:
    """–ü—Ä–∏–≤–æ–¥–∏—Ç datetime –∫ –ª–æ–∫–∞–ª—å–Ω–æ–π (Asia/Tashkent) –¥–∞—Ç–µ. –ï—Å–ª–∏ tz –Ω–µ –∑–∞–¥–∞–Ω ‚Äî —Å—á–∏—Ç–∞–µ–º UTC."""
    if dt is None:
        return None
    if dt.tzinfo is None:
        dt = dt.replace(tzinfo=timezone.utc)
    return dt.astimezone(_TZ).date()


def _extract_user_and_chat(update: Update) -> Tuple[Optional[int], Optional[int], Optional[str], Optional[str]]:
    """
    –î–æ—Å—Ç–∞—ë—Ç (user_id, chat_id, username, language) –∏–∑ Update.
    –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∞–ø–¥–µ–π—Ç–æ–≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç (None, None, None, None).
    """
    if update.message:
        u = update.message.from_user
        return (
            (u.id if u else None),
            update.message.chat.id,
            (u.username if u else None),
            (u.language_code if u else None),
        )
    if update.callback_query:
        u = update.callback_query.from_user
        chat_id = update.callback_query.message.chat.id if update.callback_query.message else None
        return (
            (u.id if u else None),
            chat_id,
            (u.username if u else None),
            (u.language_code if u else None),
        )
    return (None, None, None, None)


class DailyStreakMiddleware(BaseMiddleware):
    """
    –ü—Ä–∞–≤–∏–ª–∞:
    - –î–µ–Ω—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: –±–æ–Ω—É—Å –ù–ï –¥–∞—ë–º, –Ω–æ –æ—Ç–º–µ—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (last_active_date=today) –∏ —Å—Ç–∞–≤–∏–º daily_streak=1.
    - –í –ª—é–±–æ–π –¥—Ä—É–≥–æ–π –¥–µ–Ω—å: –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞ —Å—É—Ç–∫–∏ ‚Äî daily_streak (+1 –∏–ª–∏ =1) –∏ –≤—ã–¥–∞—ë–º 1 —à–∞–Ω—Å.
    - –ò–¥—ë–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –∑–∞ —Å—á—ë—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è last_active_date —Å —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç–æ–π.
    - –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±–æ–Ω—É—Å —Ä–µ–∞–ª—å–Ω–æ –≤—ã–¥–∞–Ω.
    """

    async def __call__(self, handler: Callable, event: Update, data: dict) -> Any:
        session: AsyncSession = data["session"]
        bot = data["bot"]

        user_id, chat_id, username, language = _extract_user_and_chat(event)
        if not user_id:
            return await handler(event, data)

        # 1) –ø–æ–ª—É—á–∞–µ–º/—Å–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user, is_create = await User.get_or_create(
            session,
            id=user_id,
            username=username,
            language=language,
        )

        # 2) —Ñ–∏–ª—å—Ç—Ä—ã
        if user.status == UserStatus.Banned:
            return
        if user.profile and not user.profile.is_active:
            return

        today = _today_tashkent()

        # 3) –î–µ–Ω—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: –ù–ï –¥–∞—ë–º –±–æ–Ω—É—Å, –Ω–æ —Ñ–∏–∫—Å–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ —Å—Ç–∞—Ä—Ç—É–µ–º —Å—Ç—Ä–∏–∫ = 1
        created_local = _to_tashkent_date(getattr(user, "created_at", None))
        if is_create or (created_local == today):
            if user.last_active_date != today:
                user.daily_streak = 1
                user.last_active_date = today
                await session.commit()
            data["user"] = user
            return await handler(event, data)

        # 4) –û–±—ã—á–Ω—ã–π –¥–µ–Ω—å: –ø–æ–ø—Ä–æ–±—É–µ–º –≤—ã–¥–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å (—Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞ –¥–µ–Ω—å)
        got_bonus = await self._touch_today(session, user, today)

        # 5) —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ –±–æ–Ω—É—Å —Ä–µ–∞–ª—å–Ω–æ –≤—ã–¥–∞–Ω
        if got_bonus and chat_id:
            text = (
                f"üéÅ –í—ã –ø–æ–ª—É—á–∏–ª–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å: 1 —à–∞–Ω—Å!\n"
                f"üî• –í–∞—à —Ç–µ–∫—É—â–∏–π —Å—Ç—Ä–∏–∫: {user.daily_streak} –¥–Ω."
            )

            try:
                await bot.send_message(chat_id, text)
            except Exception:
                # –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –ø–æ –∂–µ–ª–∞–Ω–∏—é, –Ω–æ –ø–∞–π–ø–ª–∞–π–Ω –Ω–µ —Ä–æ–Ω—è–µ–º
                pass

        data["user"] = user
        return await handler(event, data)

    async def _touch_today(self, session: AsyncSession, user: UserModel, today: date) -> bool:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è –ø–µ—Ä–≤—ã–π —Ä–∞–∑ –∏ –±–æ–Ω—É—Å –≤—ã–¥–∞–Ω."""
        if user.last_active_date == today:
            return False

        # —Å—Ç—Ä–∏–∫
        if user.last_active_date is None:
            user.daily_streak = 1
        elif user.last_active_date == (today - timedelta(days=1)):
            user.daily_streak += 1
        else:
            user.daily_streak = 1

        user.last_active_date = today

        # –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å: +1 —à–∞–Ω—Å (–≤ —Å—É–º–º–∞—Ö = CHANCE_COST)
        add_sum = CHANCE_COST
        user.balance += add_sum
        session.add(BalanceTopUpModel(
            user_id=user.id,
            amount=1,                  # 1 —à–∞–Ω—Å
            paid_sum=add_sum,          # –Ω–∞ —Ç–≤–æ–µ–π –º–æ–¥–µ–ª–∏ –±–∞–ª–∞–Ω—Å –≤ —Å—É–º–º–∞—Ö
            source=TopUpSource.Initial,  # –º–æ–∂–µ—à—å –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ TopUpSource.Internal, –µ—Å–ª–∏ –µ—Å—Ç—å
            payload="bonus:daily",
        ))

        await session.commit()
        return True
