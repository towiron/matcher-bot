from aiogram import F
from aiogram.filters.state import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.enums.parse_mode import ParseMode

from app.business.filter_service import send_filter
from app.business.profile_service import display_filtered_profile, update_user_username_from_telegram
from app.business.dating_service import send_got_chance_alert
from app.keyboards.default.base import search_kb, search_kb_after_chance, payment_kb
from app.keyboards.default.search import build_filter_kb, search_menu_kb
from app.routers import dating_router
from app.states.default import Search
from app.text import message_text as mt
from app.utils.reply_texts import (
    KB_FIND_MATCH_V,
    KB_SEARCH_BY_FILTER_V,
    KB_SEARCH_BY_AI_V,
    KB_GIVE_CHANCE_V,
    KB_NEXT_V,
    KB_BACK_TO_SEARCH_V,
)

from database.models import UserModel
from database.services import User, Match, Profile, ViewedProfile
from database.services.search import search_profiles, search_profiles_by_ai_with_reasons
from sqlalchemy.ext.asyncio import AsyncSession

from utils.logging import logger
from dataclasses import dataclass, asdict
from typing import Dict, List

from aiogram import types

@dating_router.message(StateFilter(None), F.text.in_(KB_FIND_MATCH_V))
async def _search_command(message: types.Message, session: AsyncSession, user: UserModel, state: FSMContext) -> None:
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–Ω—è–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ñ–µ—Ä—Ç—É
    if not user.filter:
        await message.answer(mt.FILL_FILTER, reply_markup=build_filter_kb(user))
    else:
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫
        search_resumed = await check_and_resume_paused_search(message, state, user, session)
        if not search_resumed:
            # –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—ã—á–Ω–æ–µ –º–µ–Ω—é –ø–æ–∏—Å–∫–∞
            await send_filter(session, user.id, user)

@dating_router.message(StateFilter(None), F.text.in_(KB_SEARCH_BY_FILTER_V))
async def _search_command_by_filter(message: types.Message, state: FSMContext, user: UserModel, session: AsyncSession) -> None:
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫
    search_resumed = await check_and_resume_paused_search(message, state, user, session)
    if not search_resumed:
        # –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞, –∑–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫
        await start_search_by_filter(message=message, state=state, user=user, session=session)

@dating_router.message(StateFilter(None), F.text.in_(KB_SEARCH_BY_AI_V))
async def _search_by_ai_command(message: types.Message, state: FSMContext, user: UserModel, session: AsyncSession) -> None:
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫
    search_resumed = await check_and_resume_paused_search(message, state, user, session)
    if not search_resumed:
        # –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—è –ø—Ä–æ—Ñ–∏–ª—è
        if not await _ensure_ai_search_fields(message, user):
            return
        # –ï—Å–ª–∏ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã, –∑–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫
        await start_search_by_ai(message=message, state=state, user=user, session=session)

@dating_router.message(
    StateFilter(Search.search),
    F.text.in_((*KB_NEXT_V, *KB_GIVE_CHANCE_V, *KB_BACK_TO_SEARCH_V)),
)
async def _search_profile(message: types.Message, state: FSMContext, user: UserModel, session: AsyncSession) -> None:
    await handle_search_navigation(message=message, state=state, user=user, session=session)


# ---------- FSM payload ----------

@dataclass
class SearchData:
    ids: List[int]
    mode: str                     # "filter" | "ai"
    ai_reasons: Dict[str, str]    # –∫–ª—é—á–∏ ‚Äî —Å—Ç—Ä–æ–∫–æ–≤—ã–µ id
    paused_for_payment: bool = False  # —Ñ–ª–∞–≥, —á—Ç–æ –ø–æ–∏—Å–∫ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –æ–ø–ª–∞—Ç—ã

    @staticmethod
    async def load(state: FSMContext) -> "SearchData":
        data = await state.get_data()
        return SearchData(
            ids=list(data.get("ids", [])),
            mode=data.get("mode", "filter"),
            ai_reasons=dict(data.get("ai_reasons") or {}),
            paused_for_payment=data.get("paused_for_payment", False),
        )

    async def save(self, state: FSMContext) -> None:
        await state.update_data(**asdict(self))


# ---------- guards ----------

async def _ensure_profile_or_ask(message: types.Message, user: UserModel) -> bool:
    if not user.profile:
        await message.answer(mt.FILL_PROFILE_FIRST)
        return False
    return True

async def _ensure_filter_or_show(message: types.Message, session: AsyncSession, user: UserModel) -> bool:
    if not user.filter:
        await message.answer(mt.FILL_FILTER, reply_markup=None)  # —Ä–µ–ø–ª–∞–π-–∫–± —Å–æ–±–µ—Ä—ë—Ç—Å—è –≤ send_filter
        await send_filter(session, user.id, user)
        return False
    return True

async def _ensure_ai_search_fields(message: types.Message, user: UserModel) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –ª–∏ –ø–æ–ª—è –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è —É–º–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞."""
    if not user.profile:
        await message.answer(mt.FILL_PROFILE_FIRST)
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —É–º–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
    missing_fields = []
    short_fields = []
    
    if not user.profile.about or user.profile.about.strip() == "":
        missing_fields.append("–û —Å–µ–±–µ")
    elif len(user.profile.about.strip()) < 20:
        short_fields.append("–û —Å–µ–±–µ (–º–∏–Ω–∏–º—É–º 20 —Å–∏–º–≤–æ–ª–æ–≤)")
    
    if not user.profile.looking_for or user.profile.looking_for.strip() == "":
        missing_fields.append("–ö–æ–≥–æ –∏—â–µ—Ç–µ")
    elif len(user.profile.looking_for.strip()) < 20:
        short_fields.append("–ö–æ–≥–æ –∏—â–µ—Ç–µ (–º–∏–Ω–∏–º—É–º 20 —Å–∏–º–≤–æ–ª–æ–≤)")
    
    if missing_fields or short_fields:
        all_fields = missing_fields + short_fields
        fields_text = ", ".join(all_fields)
        
        if missing_fields:
            message_text = (
                f"‚ùå –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —É–º–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –ø–æ–ª—è –ø—Ä–æ—Ñ–∏–ª—è:\n\n"
                f"üìù {fields_text}\n\n"
            )
        else:
            message_text = (
                f"‚ö†Ô∏è –î–ª—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —É–º–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Ä–∞—Å—à–∏—Ä–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –ø–æ–ª—è –ø—Ä–æ—Ñ–∏–ª—è:\n\n"
                f"üìù {fields_text}\n\n"
            )
        
        message_text += (
            "üí° –£–º–Ω—ã–π –ø–æ–∏—Å–∫ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∞—à–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã –∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è, "
            "–ø–æ—ç—Ç–æ–º—É –≤–∞–∂–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—Å–∞—Ç—å —Å–µ–±—è –∏ –∫–æ–≥–æ –≤—ã –∏—â–µ—Ç–µ.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–ø–æ–ª–Ω–∏—Ç–µ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )
        
        await message.answer(message_text, reply_markup=search_menu_kb(user=user))
        return False
    
    return True


# ---------- public API (–¥–ª—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤) ----------

async def start_search_by_filter(
    message: types.Message, state: FSMContext, user: UserModel, session
) -> None:
    """–û–±—ã—á–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞–º."""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–Ω—è–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ñ–µ—Ä—Ç—É
    await message.answer(mt.SEARCH, reply_markup=search_kb())

    if not await _ensure_profile_or_ask(message, user):
        return

    profile_list = await search_profiles(session, user.profile)
    if not profile_list:
        await message.answer(mt.INVALID_PROFILE_SEARCH, reply_markup=search_menu_kb(user=user))
        return

    await state.set_state(Search.search)
    data = SearchData(ids=profile_list, mode="filter", ai_reasons={})
    await data.save(state)

    another_user = await User.get_with_profile(session, profile_list[0])
    if another_user:
        # –û–±–Ω–æ–≤–ª—è–µ–º username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º –ø—Ä–æ—Ñ–∏–ª—è
        await update_user_username_from_telegram(session, profile_list[0])
        
        await display_filtered_profile(session, user.id, another_user.profile, user.language, user.id)
    else:
        await message.answer(mt.INVALID_PROFILE_SEARCH, reply_markup=search_menu_kb(user=user))


async def start_search_by_ai(
        message: types.Message, state: FSMContext, user: UserModel, session: AsyncSession
) -> None:
    """–ò–ò-—Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ + –æ–±—ä—è—Å–Ω–µ–Ω–∏—è.
    1) –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–µ—Ä–µ–¥ –ò–ò-–∑–∞–ø—Ä–æ—Å–æ–º
    2) –î–µ–ª–∞–µ–º –ò–ò-–ø–æ–∏—Å–∫ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —à–∞–Ω—Å—ã
    3) –°–ø–∏—Å—ã–≤–∞–µ–º 3 —à–∞–Ω—Å–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ò–ò –Ω–∞—à–µ–ª –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
    """
    await message.answer(mt.SEARCH, reply_markup=search_kb())

    if not await _ensure_profile_or_ask(message, user):
        return

    # 1) –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ü–ï–†–ï–î –ª—é–±—ã–º–∏ –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏
    balance_now = user.balance_chances
    logger.log("BALANCE_DEBUG", f"user={user.id} balance_now={balance_now} (type: {type(balance_now)})")
    
    if balance_now < 3:
        logger.log("BALANCE_DEBUG", f"user={user.id} insufficient_balance: {balance_now} < 3")
        await message.answer(
            text=mt.SMART_SEARCH_BALANCE_ERROR(balance_now),
            reply_markup=payment_kb())
        return

    # 2) –§–∏–ª—å—Ç—Ä –ë–î
    profile_list = await search_profiles(session, user.profile)
    if not profile_list:
        await message.answer(mt.INVALID_PROFILE_SEARCH, reply_markup=search_menu_kb(user=user))
        return

    # 3) –ò–ò-—Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –±–∞–ª–∞–Ω—Å)
    try:
        ids, reasons = await search_profiles_by_ai_with_reasons(
            session=session,
            user_profile_id=user.profile.id,
            profile_ids=profile_list,
            max_results=5,
            language=user.language,
        )
        logger.log("AI_MATCH_REASONS", f"user={user.id} top={ids} reasons={reasons}")
    except Exception as e:
        logger.log("AI_MATCH_ERROR", f"user={user.id} error: {e}")
        ids, reasons = [], {}

    if not ids:
        # –ò–ò –Ω–µ –Ω–∞—à–µ–ª –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ —Å–ø–∏—Å—ã–≤–∞–µ–º
        await message.answer(
            "ü§ñ –£–º–Ω—ã–π –ø–æ–∏—Å–∫ –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç.\n\n"
            "üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
            "‚Ä¢ –û–±–Ω–æ–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è\n"
            "‚Ä¢ –†–∞—Å—à–∏—Ä–∏—Ç—å –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞\n"
            "‚Ä¢ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –æ–±—ã—á–Ω—ã–π –ø–æ–∏—Å–∫",
            reply_markup=search_menu_kb(user=user)
        )
        return

    # 4) –°–ø–∏—Å—ã–≤–∞–µ–º 3 —à–∞–Ω—Å–∞ —á–µ—Ä–µ–∑ User.use_ai_search
    logger.log("BALANCE_DEBUG", f"user={user.id} balance_check_passed, proceeding to debit")
    try:
        logger.log("BALANCE_DEBUG", f"user={user.id} calling use_ai_search")
        await User.use_ai_search(session=session, user=user)
        await session.refresh(user)  # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        logger.log("BALANCE_DEBIT", f"user={user.id} -3 (smart_search_success via use_ai_search)")
    except Exception as e:
        logger.log("BALANCE_DEBIT_ERROR", f"user={user.id} use_ai_search failed: {e!r}")
        await message.answer(mt.ERR_CHANCES_DEBIT_FAILED, reply_markup=search_menu_kb(user=user))
        return

    logger.log("BALANCE_DEBUG", f"user={user.id} debit_successful, proceeding to show results")

    # 5) –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é –∞–Ω–∫–µ—Ç—É
    await state.set_state(Search.search)
    data = SearchData(
        ids=ids,
        mode="ai",
        ai_reasons={str(k): v for k, v in reasons.items()},
    )
    await data.save(state)

    first_id = ids[0]
    another_user = await User.get_with_profile(session, first_id)
    if not another_user:
        await message.answer(mt.INVALID_PROFILE_SEARCH, reply_markup=search_menu_kb(user=user))
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º –ø—Ä–æ—Ñ–∏–ª—è
    await update_user_username_from_telegram(session, first_id)

    reason_text = data.ai_reasons.get(str(first_id))
    if reason_text:
        await message.answer(text=mt.SMART_SEARCH_MATCH_REASON(reason=reason_text))

    await display_filtered_profile(session, user.id, another_user.profile, user.language, user.id)


async def handle_search_navigation(
    message: types.Message, state: FSMContext, user: UserModel, session
) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫: –î–∞–ª–µ–µ / –î–∞—Ç—å —à–∞–Ω—Å / –ù–∞–∑–∞–¥ –∫ –ø–æ–∏—Å–∫—É / ‚Ä¶"""
    data = await SearchData.load(state)
    profile_list = data.ids

    if not profile_list:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–æ—Ñ–∏–ª–∏ –ø–æ —Ç–µ–∫—É—â–µ–º—É —Ñ–∏–ª—å—Ç—Ä—É
        remaining_profiles = await search_profiles(session, user.profile)
        if remaining_profiles:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ ID –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            data.ids = remaining_profiles
            await data.save(state)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å
            first_id = remaining_profiles[0]
            
            # –û–±–Ω–æ–≤–ª—è–µ–º username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º –ø—Ä–æ—Ñ–∏–ª—è
            await update_user_username_from_telegram(session, first_id)
            
            profile = await Profile.get(session, first_id)
            await display_filtered_profile(session, user.id, profile, user.language, user.id)
            return
        else:
            await message.answer(mt.EMPTY_PROFILE_SEARCH)
            await state.clear()
            await send_filter(session, message.from_user.id, user)
            return

    # –í–µ—Ç–∫–∞ "–î–∞—Ç—å —à–∞–Ω—Å"
    if message.text in KB_GIVE_CHANCE_V:
        another_user = await User.get_with_profile(session, profile_list[0])  # —Ç–µ–∫—É—â–∏–π –ø–æ–∫–∞–∑–∞–Ω
        if not another_user:
            await message.answer(mt.INVALID_PROFILE_SEARCH, reply_markup=search_menu_kb(user=user))
            return
        # –ü—ã—Ç–∞–µ–º—Å—è –¥–∞—Ç—å —à–∞–Ω—Å (—Ñ—É–Ω–∫—Ü–∏—è —Å–∞–º–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–µ —à–∞–Ω—Å–æ–≤)
        await _give_chance(
            message=message,
            user=user,
            another_user=another_user,
            session=session,
            state=state,
            search_data=data,
        )
        return

    # –í–µ—Ç–∫–∞ "–ú–µ–Ω—é –ø–æ–∏—Å–∫–∞"
    if message.text in KB_BACK_TO_SEARCH_V:
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é –ø–æ–∏—Å–∫–∞
        await state.clear()
        await send_filter(session, message.from_user.id, user)
        return

    # –ò–Ω–∞—á–µ: ¬´–î–∞–ª–µ–µ¬ª ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–ª–µ–¥—É—é—â–µ–≥–æ
    
    await _show_next_profile(session, message, state, user, data)


async def _give_chance(message: types.Message, user: UserModel, another_user: UserModel, session: AsyncSession, state: FSMContext = None, search_data: SearchData = None) -> None:
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —à–∞–Ω—Å–æ–≤ –¥–ª—è –¥–∞—á–∏ —à–∞–Ω—Å–∞
    if user.balance_chances < 1:
        if state and search_data:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã
            search_data.paused_for_payment = True
            await search_data.save(state)
            logger.log("GIVE_CHANCE_DEBUG", f"user={user.id} saved_search_state_for_payment, mode={search_data.mode}")
        
        await message.answer(
            f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —à–∞–Ω—Å–æ–≤ –¥–ª—è –¥–∞—á–∏ —à–∞–Ω—Å–∞. –£ –≤–∞—Å {user.balance_chances} —à–∞–Ω—Å(–æ–≤).",
            reply_markup=payment_kb()
        )
        return

    # –°–ø–∏—Å—ã–≤–∞–µ–º 1 —à–∞–Ω—Å –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –º–∞—Ç—á–∞
    try:
        await User.use_one_chance(session=session, user=user, target_id=another_user.id)
        await session.refresh(user)  # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        logger.log("BALANCE_DEBUG", f"user={user.id} -1 (give_chance via use_one_chance)")
    except ValueError as e:
        logger.log("BALANCE_DEBUG", f"user={user.id} ValueError caught in give_chance: {e}")
        raise ValueError("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —à–∞–Ω—Å–æ–≤ –¥–ª—è –¥–∞—á–∏ —à–∞–Ω—Å–∞")
    except Exception as e:
        logger.log("BALANCE_DEBUG", f"user={user.id} use_one_chance failed: {e!r}")
        await message.answer(mt.ERR_CHANCES_DEBIT_FAILED, parse_mode=ParseMode.HTML)
        return

    # –°–æ–∑–¥–∞–µ–º –º–∞—Ç—á
    is_create = await Match.create(session, message.from_user.id, another_user.id, None)
    if not is_create:
        return

    # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await session.refresh(user)
    user_balance = await User.get_chance_balance(user)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram –ø–µ—Ä–µ–¥ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Å—Å—ã–ª–∫–∏
    updated_username = await update_user_username_from_telegram(session, another_user.id)
    
    profile_link = (
        f"https://t.me/{updated_username}"
        if updated_username
        else f"tg://user?id={another_user.id}"
    )

    await message.answer(text=mt.GAVE_CHANCE(profile_link, user_balance), parse_mode=ParseMode.HTML, reply_markup=search_kb_after_chance(), disable_web_page_preview=True)

    # –£–≤–µ–¥–æ–º–∏–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è —à–∞–Ω—Å–∞: –æ—Ç–ø—Ä–∞–≤–∏–º –µ–º—É –ø—Ä–æ—Ñ–∏–ª—å –¥–∞—Ä–∏—Ç–µ–ª—è –∏ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–æ–Ω—Ç–∞–∫—Ç
    await send_got_chance_alert(session=session, recipient=another_user, giver=user)

async def _show_next_profile(
    session: AsyncSession,
    message: types.Message,
    state: FSMContext,
    user: UserModel,
    data: SearchData,
) -> None:
    ids = data.ids
    if not ids:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–æ—Ñ–∏–ª–∏ –ø–æ —Ç–µ–∫—É—â–µ–º—É —Ñ–∏–ª—å—Ç—Ä—É
        remaining_profiles = await search_profiles(session, user.profile)
        if remaining_profiles:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ ID –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            data.ids = remaining_profiles
            await data.save(state)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å
            first_id = remaining_profiles[0]
            profile = await Profile.get(session, first_id)
            await display_filtered_profile(session, user.id, profile, user.language, user.id)
            return
        else:
            await message.answer(mt.EMPTY_PROFILE_SEARCH)
            await state.clear()
            await send_filter(session, message.from_user.id, user)
            return

    # —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–π
    shown_user_id = ids.pop(0)

    # –ª–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä
    await ViewedProfile.get_or_create(session, viewer_id=user.id, viewed_user_id=shown_user_id)

    if not ids:
        # === –ö–û–ù–ï–¶ –ü–ê–ß–ö–ò ===
        if data.mode == "ai":
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â—ë –∫–∞–Ω–¥–∏–¥–∞—Ç—ã –ø–æ –æ–±—ã—á–Ω–æ–º—É —Ñ–∏–ª—å—Ç—Ä—É (–∑–Ω–∞—á–∏—Ç –º–æ–∂–Ω–æ —Å–Ω–æ–≤–∞ –∑–∞–ø—É—Å—Ç–∏—Ç—å —É–º–Ω—ã–π –ø–æ–∏—Å–∫)
            remaining_candidates = await search_profiles(session, user.profile)

            if remaining_candidates:
                await message.answer(text=mt.SMART_SEARCH_EMPTY_REPEAT,
                    reply_markup=search_menu_kb(user=user),
                )
            else:
                await message.answer(
                    text=mt.SMART_SEARCH_EMPTY_FALLBACK,
                    reply_markup=search_menu_kb(user=user),
                )
        else:
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–Ω–æ–≤–æ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Ñ–∏–ª–µ–π –ø–æ —Ç–µ–∫—É—â–µ–º—É —Ñ–∏–ª—å—Ç—Ä—É
            profile_list = await search_profiles(session, user.profile)
            if profile_list:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ ID –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
                data.ids = profile_list
                await data.save(state)
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å
                first_id = profile_list[0]
                
                # –û–±–Ω–æ–≤–ª—è–µ–º username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º –ø—Ä–æ—Ñ–∏–ª—è
                await update_user_username_from_telegram(session, first_id)
                
                profile = await Profile.get(session, first_id)
                await display_filtered_profile(session, user.id, profile, user.language, user.id)
                return
            else:
                # –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
                await message.answer(mt.INVALID_PROFILE_SEARCH)

        await state.clear()
        await send_filter(session, message.from_user.id, user)
        return

    # —Å–ª–µ–¥—É—é—â–∏–π
    next_id = ids[0]
    data.ids = ids
    await data.save(state)

    # === –í–ê–ñ–ù–û: –Ω–∏–∫–∞–∫–∏—Ö —Å–ø–∏—Å–∞–Ω–∏–π —Ç—É—Ç! –¢–æ–ª—å–∫–æ –ø–æ–∫–∞–∑ —Å–ª–µ–¥—É—é—â–µ–≥–æ ===
    if data.mode == "ai":
        reason_text = data.ai_reasons.get(str(next_id))
        if reason_text:
            await message.answer(mt.SMART_SEARCH_MATCH_REASON(reason=reason_text))

    # –û–±–Ω–æ–≤–ª—è–µ–º username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º –ø—Ä–æ—Ñ–∏–ª—è
    await update_user_username_from_telegram(session, next_id)

    profile = await Profile.get(session, next_id)
    await display_filtered_profile(session, user.id, profile, user.language, user.id)


# ---------- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ ----------

async def check_and_resume_paused_search(
    message: types.Message, 
    state: FSMContext, 
    user: UserModel, 
    session: AsyncSession
) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫, –∏ –µ—Å–ª–∏ –¥–∞ - –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –ø–æ–∏—Å–∫ –±—ã–ª –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω, False - –µ—Å–ª–∏ –Ω–µ—Ç.
    """
    current_state = await state.get_state()
    logger.log("RESUME_SEARCH_DEBUG", f"user={user.id} checking_paused_search, current_state={current_state}")
    
    if current_state != Search.search:
        logger.log("RESUME_SEARCH_DEBUG", f"user={user.id} not_in_search_state")
        return False
    
    data = await SearchData.load(state)
    logger.log("RESUME_SEARCH_DEBUG", f"user={user.id} loaded_search_data, paused={data.paused_for_payment}, ids_count={len(data.ids)}")
    
    if not data.paused_for_payment or not data.ids:
        logger.log("RESUME_SEARCH_DEBUG", f"user={user.id} no_paused_search_or_empty_ids")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã
    await session.refresh(user)  # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    balance_now = user.balance_chances
    
    # –õ–û–ì–ò–ö–ê: 
    # - –î–ª—è —É–º–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞: 3 —à–∞–Ω—Å–∞ —É–∂–µ —Å–ø–∏—Å–∞–Ω—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ, –Ω—É–∂–Ω–æ —Ç–æ–ª—å–∫–æ 1 –¥–ª—è "–¥–∞—Ç—å —à–∞–Ω—Å"
    # - –î–ª—è –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞: —à–∞–Ω—Å—ã –Ω–µ —Å–ø–∏—Å—ã–≤–∞–ª–∏—Å—å, –Ω—É–∂–Ω–æ —Ç–æ–ª—å–∫–æ 1 –¥–ª—è "–¥–∞—Ç—å —à–∞–Ω—Å"
    # - –í –ª—é–±–æ–º —Å–ª—É—á–∞–µ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ 1 —à–∞–Ω—Å–∞
    required_chances = 1
    
    logger.log("RESUME_SEARCH_DEBUG", f"user={user.id} mode={data.mode} balance={balance_now} required={required_chances}")
    
    if balance_now < required_chances:
        # –ë–∞–ª–∞–Ω—Å –≤—Å–µ –µ—â–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–µ–Ω
        logger.log("RESUME_SEARCH_DEBUG", f"user={user.id} insufficient_balance_for_resume: {balance_now} < {required_chances}")
        await message.answer(
            f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —à–∞–Ω—Å–æ–≤ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞. –£ –≤–∞—Å {balance_now} —à–∞–Ω—Å(–æ–≤), —Ç—Ä–µ–±—É–µ—Ç—Å—è {required_chances}.",
            reply_markup=payment_kb()
        )
        return False
    
    # –ë–∞–ª–∞–Ω—Å –¥–æ—Å—Ç–∞—Ç–æ—á–µ–Ω, –≤–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∏—Å–∫
    data.paused_for_payment = False
    await data.save(state)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å (—Ç–æ—Ç, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—Ç–µ–ª –¥–∞—Ç—å —à–∞–Ω—Å)
    current_id = data.ids[0]
    another_user = await User.get_with_profile(session, current_id)
    
    if not another_user:
        await message.answer(mt.INVALID_PROFILE_SEARCH, reply_markup=search_menu_kb(user=user))
        await state.clear()
        return True
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¢–û–¢ –ñ–ï –ø—Ä–æ—Ñ–∏–ª—å, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—Ç–µ–ª –¥–∞—Ç—å —à–∞–Ω—Å
    if data.mode == "ai":
        reason_text = data.ai_reasons.get(str(current_id))
        if reason_text:
            await message.answer(text=mt.SMART_SEARCH_MATCH_REASON(reason=reason_text))
    
    # –û–±–Ω–æ–≤–ª—è–µ–º username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º –ø—Ä–æ—Ñ–∏–ª—è
    await update_user_username_from_telegram(session, current_id)
    
    await display_filtered_profile(session, user.id, another_user.profile, user.language, user.id)
    
    await message.answer(
        "‚úÖ –¢–µ–ø–µ—Ä—å —É –≤–∞—Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —à–∞–Ω—Å–æ–≤! –í—ã –º–æ–∂–µ—Ç–µ –¥–∞—Ç—å —à–∞–Ω—Å —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∏—Å–∫.",
        reply_markup=search_kb()
    )
    
    logger.log("RESUME_SEARCH_DEBUG", f"user={user.id} resumed_search_with_same_profile={current_id}")
    
    return True
