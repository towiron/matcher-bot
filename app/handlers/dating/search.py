from aiogram import F, types
from aiogram.filters.state import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.enums.parse_mode import ParseMode

from app.business.filter_service import send_filter
from app.business.menu_service import menu
from app.business.profile_service import display_filtered_profile
from app.keyboards.default.base import search_kb, search_kb_after_chance, payment_kb
from app.keyboards.default.search import build_filter_kb
from app.routers import dating_router
from app.states.default import Search
from app.text import message_text as mt

from database.models import UserModel
from database.services import User, Match, Profile, ViewedProfile
from database.services.search import search_profiles, search_profiles_by_ai_with_reasons
from sqlalchemy.ext.asyncio import AsyncSession

from utils.logging import logger
from loader import _


@dating_router.message(StateFilter(None), F.text == _(mt.KB_FIND_MATCH))
async def _search_command(message: types.Message, session: AsyncSession, user: UserModel) -> None:
    """–ë–æ—Ç –ø–æ–¥–±–∏—Ä–∞–µ—Ç –∞–Ω–∫–µ—Ç—ã, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –∏—Ö"""
    if not user.filter:
        await message.answer(mt.FILL_FILTER, reply_markup=build_filter_kb(user))
    else:
        await send_filter(session, user.id, user)



@dating_router.message(StateFilter(None), F.text == mt.KB_SEARCH_BY_FILTER)
async def _search_command_by_filter(
    message: types.Message, state: FSMContext, user: UserModel, session
) -> None:
    """–ë–æ—Ç –ø–æ–¥–±–∏—Ä–∞–µ—Ç –∞–Ω–∫–µ—Ç—ã, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –∏—Ö (–æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º)."""
    await message.answer(mt.SEARCH, reply_markup=search_kb)

    if not user.profile:
        await message.answer(mt.FILL_PROFILE_FIRST)
        return

    profile_list = await search_profiles(session, user.profile)
    if not profile_list:
        await message.answer(mt.INVALID_PROFILE_SEARCH)
        await menu(message.from_user.id)
        return

    await state.set_state(Search.search)
    await state.update_data(
        ids=profile_list,
        mode="filter",      # üëà —è–≤–Ω—ã–π —Ä–µ–∂–∏–º –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
        ai_reasons=None     # üëà –æ—á–∏—â–∞–µ–º –ø—Ä–∏—á–∏–Ω—ã
    )

    another_user = await User.get_with_profile(session, profile_list[0])
    if another_user:
        await display_filtered_profile(session, user.id, another_user.profile, user.language)
    else:
        await message.answer(mt.INVALID_PROFILE_SEARCH)
        await menu(message.from_user.id)


@dating_router.message(
    StateFilter(Search.search),
    F.text.in_((_(mt.KB_NEXT), _(mt.KB_GIVE_CHANCE), _(mt.KB_BACK_TO_SEARCH))),
)
async def _search_profile(
    message: types.Message, state: FSMContext, user: UserModel, session
) -> None:
    """
    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É–µ—Ç —Å –∞–Ω–∫–µ—Ç–∞–º–∏ (–ª–∞–π–∫/–¥–∏–∑–ª–∞–π–∫/–≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º),
    ¬´–î–∞–ª–µ–µ¬ª –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ª–µ–¥—É—é—â—É—é –∞–Ω–∫–µ—Ç—É —Å–æ–≥–ª–∞—Å–Ω–æ —Ç–µ–∫—É—â–µ–º—É —Ä–µ–∂–∏–º—É (filter/ai).
    """
    data = await state.get_data()
    profile_list = data.get("ids", [])
    if not profile_list:
        await message.answer(mt.EMPTY_PROFILE_SEARCH)
        await state.clear()
        await send_filter(session, message.from_user.id, user)
        return

    another_user = await User.get_with_profile(session, profile_list[0])

    # --- –î–∞—Ç—å —à–∞–Ω—Å ---
    if message.text == _(mt.KB_GIVE_CHANCE):
        if not another_user:
            await message.answer(mt.INVALID_PROFILE_SEARCH)
            return
        try:
            await User.use_one_chance(session, user, another_user.id)
            user_balance = await User.get_chance_balance(user)
            await chance_profile(
                session=session,
                message=message,
                another_user=another_user,
                user_balance=user_balance,
            )
            return
        except ValueError:
            await message.answer("‚ùå –£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å —à–∞–Ω—Å—ã.", reply_markup=payment_kb)
            return

    # --- –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –ø–æ–∏—Å–∫–∞ ---
    if message.text == _(mt.KB_BACK_TO_SEARCH):
        await state.clear()
        await send_filter(session, message.from_user.id, user)
        return

    # --- –ü–æ–∫–∞–∑–∞—Ç—å —Å–ª–µ–¥—É—é—â—É—é –∞–Ω–∫–µ—Ç—É ---
    await next_profile(session, message, profile_list, user, state)


async def chance_profile(
    session,
    message: types.Message,
    another_user: UserModel,
    user_balance: int,
    mail_text: str | None = None,
) -> types.Message:
    is_create = await Match.create(session, message.from_user.id, another_user.id, mail_text)
    if not is_create:
        return await message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫", parse_mode=ParseMode.HTML)

    profile_link = (
        f"https://t.me/{another_user.username}"
        if another_user.username
        else f"tg://user?id={another_user.id}"
    )

    text = (
        "üíå –í—ã –¥–∞–ª–∏ —à–∞–Ω—Å —ç—Ç–æ–º—É —á–µ–ª–æ–≤–µ–∫—É!\n"
        "–ü–æ—Å–º–æ—Ç—Ä–∏ –µ—â—ë —Ä–∞–∑ –∞–Ω–∫–µ—Ç—É ‚Äî –≤–¥—Ä—É–≥ —ç—Ç–æ –Ω–∞—á–∞–ª–æ —á–µ–≥–æ-—Ç–æ –æ—Å–æ–±–µ–Ω–Ω–æ–≥–æ?\n"
        f"üëâ <a href=\"{profile_link}\">–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–∏–ª—å</a>\n\n"
        f"üíé –í—ã –ø–æ—Ç—Ä–∞—Ç–∏–ª–∏ <b>1</b> —à–∞–Ω—Å, –æ—Å—Ç–∞–ª–æ—Å—å: <b>{user_balance}</b> —à–∞–Ω—Å(–æ–≤)."
    )
    return await message.answer(text, parse_mode=ParseMode.HTML, reply_markup=search_kb_after_chance)


async def next_profile(
    session,
    message: types.Message,
    profile_list: list[int],
    user: UserModel,
    state: FSMContext,
):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ª–µ–¥—É—é—â—É—é –∞–Ω–∫–µ—Ç—É –∏, –µ—Å–ª–∏ —Ä–µ–∂–∏–º 'ai', –ø—Ä–∏—Å—ã–ª–∞–µ—Ç –ø—Ä–∏—á–∏–Ω—É."""
    if not profile_list:
        await message.answer(mt.EMPTY_PROFILE_SEARCH)
        await state.clear()
        await send_filter(session, message.from_user.id, user)
        return

    shown_user_id = profile_list.pop(0)  # üëà —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–π id

    # ‚úÖ –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä
    await ViewedProfile.get_or_create(
        session,
        viewer_id=user.id,
        viewed_user_id=shown_user_id,
    )

    if not profile_list:
        await message.answer(mt.EMPTY_PROFILE_SEARCH)
        await state.clear()
        await send_filter(session, message.from_user.id, user)
        return

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
    await state.update_data(ids=profile_list)

    # —Ä–µ–∂–∏–º –∏ –ø—Ä–∏—á–∏–Ω—ã
    data = await state.get_data()
    mode = data.get("mode", "filter")
    reasons: dict = data.get("ai_reasons") or {}

    next_id = profile_list[0]

    if mode == "ai":
        reason_text = reasons.get(str(next_id)) or reasons.get(next_id)  # üëà –∫–ª—é—á –º–æ–∂–µ—Ç –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π
        if reason_text:
            await message.answer(f"üß† –ü–æ—á–µ–º—É –ø–æ–¥—Ö–æ–¥–∏—Ç: {reason_text}")

    profile = await Profile.get(session, next_id)
    await display_filtered_profile(session, user.id, profile, user.language)


@dating_router.message(StateFilter(None), F.text == _(mt.KB_SEARCH_BY_AI))
async def _search_by_ai_command(
    message: types.Message, state: FSMContext, user: UserModel, session
) -> None:
    """–ò–ò-—Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∫–µ—Ç –ø–æ about/looking_for + –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–π –∞–Ω–∫–µ—Ç—ã."""
    await message.answer(mt.SEARCH, reply_markup=search_kb)

    if not user.profile:
        await message.answer(mt.FILL_PROFILE_FIRST)
        return

    # 1) –ì—Ä—É–±—ã–π —Ñ–∏–ª—å—Ç—Ä –ë–î
    profile_list = await search_profiles(session, user.profile)
    if not profile_list:
        await message.answer(mt.INVALID_PROFILE_SEARCH)
        await menu(message.from_user.id)
        return

    # 2) –ò–ò —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ + –ø—Ä–∏—á–∏–Ω—ã
    try:
        ids, reasons = await search_profiles_by_ai_with_reasons(
            session=session,
            user_profile_id=user.profile.id,
            profile_ids=profile_list,
            max_results=5,
            language=user.language,  # –µ—Å–ª–∏ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–¥–¥–µ—Ä–∂–∞–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä language
        )
        logger.log("AI_MATCH_REASONS", f"user={user.id} top={ids} reasons={reasons}")
    except Exception as e:
        logger.log("AI_MATCH_ERROR", f"user={user.id} error: {e}")
        ids, reasons = profile_list[:5], {}

    if not ids:
        await message.answer(mt.INVALID_PROFILE_SEARCH)
        await menu(message.from_user.id)
        return

    # 3) –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∂–∏–º, ids –∏ –ø—Ä–∏—á–∏–Ω—ã
    await state.set_state(Search.search)
    await state.update_data(
        ids=ids,
        mode="ai",
        ai_reasons={str(k): v for k, v in reasons.items()}  # üëà —Ç—É—Ç
    )

    # 4) –ü–æ–∫–∞–∂–µ–º –ø–µ—Ä–≤—É—é –∞–Ω–∫–µ—Ç—É –∏ —Å—Ä–∞–∑—É –ø—Ä–∏—á–∏–Ω—É
    first_id = ids[0]
    another_user = await User.get_with_profile(session, first_id)
    if another_user:
        reason_text = reasons.get(first_id)
        if reason_text:
            await message.answer(f"üß† –ü–æ—á–µ–º—É –ø–æ–¥—Ö–æ–¥–∏—Ç: {reason_text}")
        await display_filtered_profile(session, user.id, another_user.profile, user.language)
    else:
        await message.answer(mt.INVALID_PROFILE_SEARCH)
        await menu(message.from_user.id)
