from aiogram import types, F
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, LabeledPrice, ReplyKeyboardRemove

from app.business.menu_service import menu
from app.keyboards.default.base import menu_kb
from data.config import CLICK_LIVE_TOKEN, CHANCE_COST
from database.models import UserModel
from database.models.balance_top_up import TopUpSource
from database.services import User
from loader import _
from app.routers import common_router
from app.text import message_text as mt

# –ü—Ä–æ–≤–∞–π–¥–µ—Ä—ã –∏ —Ç–æ–∫–µ–Ω—ã –æ–ø–ª–∞—Ç—ã
PAYMENT_PROVIDER_TOKENS = {
    "click": CLICK_LIVE_TOKEN,
    # "payme": PAYME_LIVE_TOKEN,
    # "uzum": UZUM_LIVE_TOKEN,
}

TOP_UP_SOURCES = {
    "click": TopUpSource.Click,
    "payme": TopUpSource.Payme,
    "uzum": TopUpSource.Uzum,
}


@common_router.message(F.text.in_(("/pay", _(mt.KB_BUY_CHANCES))))
async def choose_provider(message: types.Message, user: UserModel):
    balance =  await User.get_chance_balance(user)
    await message.answer(text=f"üíé–ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ {balance} —à–∞–Ω—Å(–æ–≤)", reply_markup=ReplyKeyboardRemove())
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí≥ Click", callback_data="provider:click")],
        # [InlineKeyboardButton(text="üí≥ Payme", callback_data="provider:payme")],
        # [InlineKeyboardButton(text="üí≥ Uzum", callback_data="provider:uzum")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="buy:back")]
    ])
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—ë–∂–Ω—É—é —Å–∏—Å—Ç–µ–º—É:", reply_markup=keyboard)

@common_router.callback_query(F.data == "buy:back")
async def back_to_menu(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.delete()
    await menu(callback.from_user.id)



@common_router.callback_query(F.data.startswith("provider:"))
async def choose_chance(callback: types.CallbackQuery):
    provider = callback.data.split(":")[1]
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üíé –ö—É–ø–∏—Ç—å 1 —à–∞–Ω—Å ‚Äî 1000 —Å—É–º", callback_data=f"buy_chances:{provider}:1")],
        [InlineKeyboardButton(text="üíé –ö—É–ø–∏—Ç—å 3 —à–∞–Ω—Å–∞ ‚Äî 3000 —Å—É–º", callback_data=f"buy_chances:{provider}:3")],
        [InlineKeyboardButton(text="üíé –ö—É–ø–∏—Ç—å 10 —à–∞–Ω—Å–æ–≤ ‚Äî 10000 —Å—É–º", callback_data=f"buy_chances:{provider}:10")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_providers")],
    ])
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–Ω—Å–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏:", reply_markup=keyboard)


@common_router.callback_query(F.data == "back_to_providers")
async def back_to_providers(callback: types.CallbackQuery):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí≥ Click", callback_data="provider:click")],
        # [InlineKeyboardButton(text="üí≥ Payme", callback_data="provider:payme")],
        # [InlineKeyboardButton(text="üí≥ Uzum", callback_data="provider:uzum")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="buy:back")]
    ])
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—ë–∂–Ω—É—é —Å–∏—Å—Ç–µ–º—É:", reply_markup=keyboard)


@common_router.callback_query(F.data.startswith("buy_chances:"))
async def handle_buy_chances(callback: types.CallbackQuery):
    _, provider, count_str = callback.data.split(":")
    chance_count = int(count_str)
    price = chance_count * CHANCE_COST

    token = PAYMENT_PROVIDER_TOKENS.get(provider)
    if not token:
        await callback.answer("–í—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.", show_alert=True)
        return

    title = f"–ü–æ–∫—É–ø–∫–∞ —à–∞–Ω—Å–æ–≤ ‚Äî {chance_count} —à—Ç."
    description = (
        f"üíé –í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –∫—É–ø–∏—Ç—å {chance_count} —à–∞–Ω—Å(–æ–≤).\n"
        f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {price} —Å—É–º.\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ."
    )

    prices = [LabeledPrice(label=f"{chance_count} —à–∞–Ω—Å(–æ–≤)", amount=price * 100)]

    await callback.message.answer_invoice(
        title=title,
        description=description,
        provider_token=token,
        currency="UZS",
        prices=prices,
        payload=f"buy:{provider}:{chance_count}",
    )
    await callback.answer()


@common_router.pre_checkout_query()
async def pre_checkout_handler(query: types.PreCheckoutQuery):
    await query.answer(ok=True)


@common_router.message(F.successful_payment)
async def on_successful_payment(message: types.Message, user: UserModel, session, state: FSMContext):
    try:
        _, provider, count_str = message.successful_payment.invoice_payload.split(":")
        chance_count = int(count_str)
    except Exception:
        await message.answer("–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –æ–ø–ª–∞—Ç—ã.")
        return

    paid_sum = message.successful_payment.total_amount // 100
    source = TOP_UP_SOURCES.get(provider)

    if not source:
        await message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä –æ–ø–ª–∞—Ç—ã.")
        return

    await User.add_chances_from_payment(
        session=session,
        user=user,
        paid_sum=paid_sum,
        payload=message.successful_payment.invoice_payload,
        source=source,
    )

    await message.answer(f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! üíé –í—ã –∫—É–ø–∏–ª–∏ {chance_count} —à–∞–Ω—Å(–æ–≤).")
    total_balance = await User.get_chance_balance(user)
    await state.clear()
    await message.answer(f"üíé –ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ {total_balance} —à–∞–Ω—Å(–æ–≤).", reply_markup=menu_kb)
