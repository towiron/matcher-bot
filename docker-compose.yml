name: matcher

x-healthcheck: &default-health-check
  interval: 30s
  timeout: 10s
  retries: 5

x-logging: &default-logging
  driver: local
  options:
    max-size: "10m"
    max-file: "3"

services:
  redis:
    image: redis:7
    container_name: redis
    networks:
      - matcher_network
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - ./temp/redis/data:/data

#  bot:
#    build:
#      context: .
#      dockerfile: Dockerfile.bot
#    restart: unless-stopped
#    extra_hosts:
#      - "host.docker.internal:host-gateway"
#    env_file:
#      - .env
#    networks:
#      - matcher_network
#    depends_on:
#      - redis
#    volumes:
#      - ./logs:/app/logs
#      - ./images:/app/images
#    environment:
#      - REDIS_HOST=redis
#      - PYTHONPATH=/app

  caddy:
    image: caddy:2.8
    environment:
      DOMAIN: ${DOMAIN}
      # опционально для Let's Encrypt, лучше указать:
      # ACME_AGREE: "true"
      # EMAIL: you@example.com
    depends_on:
      - api
    restart: unless-stopped
    networks: [ matcher_network ]
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./caddy/Caddyfile.local:/etc/caddy/Caddyfile:ro
      # раздача статики напрямую
      - ./api/static:/srv/static:ro
      - ./api/frontend:/srv/frontend:ro
      # данные caddy/сертификаты
      - caddy_data:/data
      - caddy_config:/config

#  matcher_postgres:
#    image: postgres:15
#    container_name: matcher_postgres
#    restart: "no"
#    env_file:
#      - .env
#    networks:
#      - matcher_network
#    environment:
#      POSTGRES_DB: ${DB_NAME}
#      POSTGRES_USER: ${DB_USER}
#      POSTGRES_PASSWORD: ${DB_PASS}
#    ports:
#      - "${DB_PORT:-5432}:5432"
#    volumes:
#      - ./temp/postgres/data:/var/lib/postgresql/data
#    healthcheck:
#      test: [ "CMD-SHELL", "pg_isready -U admin -d fhir" ]
#      interval: 10s
#      timeout: 5s
#      retries: 5

  api:
    build:
      context: .
      dockerfile: Dockerfile.service
    env_file:
      - .env
    extra_hosts:
      - "host.docker.internal:host-gateway"
    networks:
      - matcher_network
    expose:
      - "8000"

networks:
  matcher_network:
    driver: bridge

volumes:
  caddy_data:
  caddy_config: