name: matcher

x-logging: &default-logging
  driver: local
  options:
    max-size: "10m"
    max-file: "3"

x-healthcheck: &default-health-check
  interval: 30s
  timeout: 10s
  retries: 5

services:
  matcher_postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASS}
    volumes:
      - postgres:/var/lib/postgresql/data:rw
    networks:
      - matcher_network
    ports:
      - "5432:5432"
    logging: *default-logging

  matcher_redis:
    image: redis:7
    container_name: matcher_redis
    networks:
      - matcher_network
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - ./temp/redis/data:/data
    logging: *default-logging

  matcher_bot:
    build:
      context: .
      dockerfile: Dockerfile.bot
    container_name: matcher_bot
    restart: unless-stopped
    extra_hosts:
      - "host.docker.internal:host-gateway"
    env_file:
      - .env
    networks:
      - matcher_network
    depends_on:
      - matcher_redis
      - matcher_postgres
    volumes:
      - ./logs:/app/logs
      - ./images:/app/images
    logging: *default-logging
    environment:
      - REDIS_HOST=redis
      - PYTHONPATH=/app

  matcher_service:
    build:
      context: .
      dockerfile: Dockerfile.service
    container_name: matcher_service
    restart: unless-stopped
    logging: *default-logging
    extra_hosts:
      - "host.docker.internal:host-gateway"
    env_file:
      - .env
    networks:
      - matcher_network
    depends_on:
      - matcher_redis
      - matcher_postgres
    ports:
      - "${SERVICE_PORT:-8000}:8000"
    volumes:
      - ./frontend:/app/frontend
      - ./logs:/app/logs
    environment:
      - REDIS_HOST=redis
      - PYTHONPATH=/app

  matcher_caddy:
    container_name: matcher_caddy
    build:
      context: ./docker/caddy
    restart: unless-stopped
    environment:
      DOMAIN: ${DOMAIN}
    depends_on:
      - matcher_service
    networks:
      - matcher_network
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/caddy/Caddyfile.prod:/etc/caddy/Caddyfile:ro
      - ./frontend:/srv/app/frontend:ro
      - caddy_data:/data
      - caddy_config:/config
    logging: *default-logging
    healthcheck:
      test: [ "CMD-SHELL", "wget -qO- http://127.0.0.1/ || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 5


networks:
  matcher_network:
    driver: bridge


volumes:
  caddy_data:
  caddy_config:
  postgres: {}
